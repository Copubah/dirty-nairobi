# AWS SAM Template for Lambda Deployment
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Dirty Nairobi Backend API deployed on AWS Lambda

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  DatabaseUrl:
    Type: String
    Description: PostgreSQL database connection string
    NoEcho: true
  
  S3BucketName:
    Type: String
    Description: S3 bucket name for photo storage
  
  CorsOrigins:
    Type: String
    Default: "*"
    Description: Comma-separated list of allowed CORS origins

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.12
    Environment:
      Variables:
        DATABASE_URL: !Ref DatabaseUrl
        S3_BUCKET_NAME: !Ref S3BucketName
        BACKEND_CORS_ORIGINS: !Ref CorsOrigins
        AWS_REGION: !Ref AWS::Region

Resources:
  # Lambda Function
  DirtyNairobiAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-dirty-nairobi-api"
      CodeUri: ../../backend/
      Handler: app.lambda_handler.handler
      Description: Dirty Nairobi FastAPI backend
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: ANY
        ApiGatewayRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: ANY
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref S3BucketName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-dirty-nairobi-api"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Sub "'${CorsOrigins}'"
        MaxAge: "'600'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: !Sub "'${CorsOrigins}'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: !Sub "'${CorsOrigins}'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"

  # S3 Bucket for photos
  PhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicReadPolicy: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: [!Ref CorsOrigins]
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  # S3 Bucket Policy
  PhotosBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PhotosBucket
      PolicyDocument:
        Statement:
          - Sid: AllowPublicRead
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${PhotosBucket}/*"

  # CloudWatch Log Group
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-dirty-nairobi-api"
      RetentionInDays: 14

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${Environment}-dirty-nairobi-api-url"
  
  S3BucketName:
    Description: S3 bucket name for photos
    Value: !Ref PhotosBucket
    Export:
      Name: !Sub "${Environment}-dirty-nairobi-s3-bucket"
  
  LambdaFunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt DirtyNairobiAPI.Arn
    Export:
      Name: !Sub "${Environment}-dirty-nairobi-lambda-arn"